{"version":3,"sources":["Input/Input.js","Graphic/Graphic.js","App.js","serviceWorker.js","index.js"],"names":["props","className","type","value","y","name","onChange","updateY","x0","updateX0","x1","updateX1","Graphic","updateGraphic","a","b","parseInt","firstSegment","sumSegment","firstSegmentPath","coefficient","split","startFrom","canvas","document","getElementById","getContext","ctx","clearRect","width","height","beginPath","moveTo","lineTo","strokeText","fillStyle","translate","rotate","Math","atan","fillRect","PI","setTransform","stroke","this","style","border","margin","id","Component","App","state","e","target","setState","textAlign","verticalAlign","Input","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a8a291b5.chunk.js","sourcesContent":["import React from \"react\"\n\nexport default (props) => (\n    <div className=\"Input\">\n        <div>y</div>\n        <input\n            type=\"text\"\n            value={props.y}\n            name=\"y\"\n            onChange={props.updateY}\n        />\n        <div>x0</div>\n        <input\n            type=\"number\"\n            name=\"x0\"\n            value={props.x0}\n            onChange={props.updateX0}\n        />\n        <div>x1</div>\n        <input\n            type=\"number\"\n            value={props.x1}\n            name=\"x1\"\n            onChange={props.updateX1}\n        />\n        <br/>\n        <br/>\n    </div>\n)\n","import React, {Component} from 'react';\n\nclass Graphic extends Component {\n    updateGraphic = () => {\n        const x0 = parseInt(this.props.x0)\n        const x1 = parseInt(this.props.x1)\n        const y = this.props.y\n        const firstSegment = -x0\n        const secondSegment = x1\n        const sumSegment = firstSegment + secondSegment\n        const firstSegmentPath = firstSegment / sumSegment\n        let a, b;\n        const coefficient = ([a, b] = y.split(/x\\+?/), 1 / b ? [a || 1, b || 0] : [0, y])\n        const startFrom = (firstSegment + parseInt(coefficient[1])) / sumSegment\n\n        const canvas = document.getElementById('canvas')\n        if (canvas.getContext) {\n            const ctx = canvas.getContext('2d')\n\n            ctx.clearRect(0, 0, canvas.width, canvas.height)\n            ctx.beginPath()\n\n            ctx.moveTo(0, 100)\n            ctx.lineTo(200, 100)\n\n            if ((x0 < 0) && (x1 > 0)) {\n                // os' y\n                ctx.moveTo(200 * firstSegmentPath, 0)\n                ctx.lineTo(200 * firstSegmentPath, 200)\n            }\n\n            // os' x\n            ctx.strokeText(x0, 10, 95)\n            ctx.strokeText(x1, 185, 95)\n\n            // line\n            ctx.fillStyle = 'red';\n            ctx.translate(200 * startFrom, 100);\n            ctx.rotate(-Math.atan(coefficient[0]));\n            ctx.fillRect(0,0,200,0.5);\n            ctx.rotate(Math.PI);\n            ctx.fillRect(0,0,200,0.5);\n            ctx.setTransform(1, 0, 0, 1, 0, 1);\n\n            ctx.stroke()\n        }\n    }\n\n    componentDidMount() {\n        this.updateGraphic()\n    }\n\n    componentDidUpdate() {\n        this.updateGraphic()\n\n    }\n\n    render() {\n        return (\n            <div className=\"Graphic\" style={{border: \"0.5px solid green\", width: 200, height: 200, margin: \"0 auto\"}}>\n                <canvas id=\"canvas\" width=\"200px\" height=\"200px\"/>\n            </div>\n        )\n    }\n}\n\nexport default Graphic\n","import React, {Component} from 'react'\nimport Input from './Input/Input'\nimport Graphic from './Graphic/Graphic'\nimport './App.css'\n\nclass App extends Component {\n    state = {\n        x0: -10.0,\n        x1: 5.0,\n        y: \"-3x-3\",\n    }\n\n    updateX0 = (e) => {\n        if (this.state.x1 > parseInt(e.target.value))\n            this.setState({\n                x0: e.target.value\n            })\n    }\n\n    updateX1 = (e) => {\n        if (this.state.x0 < parseInt(e.target.value))\n            this.setState({\n                x1: e.target.value\n            })\n    }\n\n    updateY = (e) => {\n        this.setState({\n            y: e.target.value === \"\" || e.target.value === \"-\" ? \"1x\" : e.target.value\n        })\n    }\n\n    render() {\n        return (\n            <div style={{textAlign: \"center\", verticalAlign: \"middle\"}}>\n                <div>y = {this.state.y}</div>\n                <br/>\n                <Graphic\n                    x0={this.state.x0}\n                    x1={this.state.x1}\n                    y={this.state.y}\n                />\n                <br/>\n                <Input\n                    x0={this.state.x0}\n                    x1={this.state.x1}\n                    y={this.state.y}\n                    updateX0={e => this.updateX0(e)}\n                    updateX1={e => this.updateX1(e)}\n                    updateY={e => this.updateY(e)}\n                />\n            </div>\n        )\n    }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}